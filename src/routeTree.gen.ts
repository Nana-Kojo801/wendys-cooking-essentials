/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/admin'
import { Route as LayoutImport } from './routes/_layout'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as AdminProductsImport } from './routes/admin/products'
import { Route as AdminCategoriesImport } from './routes/admin/categories'
import { Route as LayoutProductsImport } from './routes/_layout/products'
import { Route as LayoutContactImport } from './routes/_layout/contact'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const AdminProductsRoute = AdminProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRoute,
} as any)

const AdminCategoriesRoute = AdminCategoriesImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRoute,
} as any)

const LayoutProductsRoute = LayoutProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutContactRoute = LayoutContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_layout/contact': {
      id: '/_layout/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof LayoutContactImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/products': {
      id: '/_layout/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof LayoutProductsImport
      parentRoute: typeof LayoutImport
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesImport
      parentRoute: typeof AdminImport
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsImport
      parentRoute: typeof AdminImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutContactRoute: typeof LayoutContactRoute
  LayoutProductsRoute: typeof LayoutProductsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutContactRoute: LayoutContactRoute,
  LayoutProductsRoute: LayoutProductsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface AdminRouteChildren {
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof LayoutContactRoute
  '/products': typeof LayoutProductsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/products': typeof AdminProductsRoute
  '/': typeof LayoutIndexRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/contact': typeof LayoutContactRoute
  '/products': typeof LayoutProductsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/products': typeof AdminProductsRoute
  '/': typeof LayoutIndexRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/_layout/contact': typeof LayoutContactRoute
  '/_layout/products': typeof LayoutProductsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/products': typeof AdminProductsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/admin'
    | '/contact'
    | '/products'
    | '/admin/categories'
    | '/admin/products'
    | '/'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/contact'
    | '/products'
    | '/admin/categories'
    | '/admin/products'
    | '/'
    | '/admin'
  id:
    | '__root__'
    | '/_layout'
    | '/admin'
    | '/_layout/contact'
    | '/_layout/products'
    | '/admin/categories'
    | '/admin/products'
    | '/_layout/'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/admin"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/contact",
        "/_layout/products",
        "/_layout/"
      ]
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/categories",
        "/admin/products",
        "/admin/"
      ]
    },
    "/_layout/contact": {
      "filePath": "_layout/contact.tsx",
      "parent": "/_layout"
    },
    "/_layout/products": {
      "filePath": "_layout/products.tsx",
      "parent": "/_layout"
    },
    "/admin/categories": {
      "filePath": "admin/categories.tsx",
      "parent": "/admin"
    },
    "/admin/products": {
      "filePath": "admin/products.tsx",
      "parent": "/admin"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
